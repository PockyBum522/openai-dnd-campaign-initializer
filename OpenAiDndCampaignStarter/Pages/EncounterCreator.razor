@page "/encounter-creator"

<PageTitle>Encounter Creator</PageTitle>

@using OpenAiDndCampaignStarter.Data.Logic
@using System.Security.Cryptography
@using Humanizer

@inject IOpenAiRequestor OpenAiRequestor;

<h1>5e Encounter Creator</h1>

@if (_encounterAreaDescription == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <br/><p>
        <h3>Encounter Area Description:</h3>
        @_encounterAreaDescription
    </p>
    
    @if (_numberOfMonstersInt == 1)
    {
        <h3>Visible Monster:</h3>
        <p>(@_numberOfMonsters?.FirstCharToUpper() @_monsterType)</p>
        @_monstersDescription
    }
    else
    {
        <h3>Visible Monsters:</h3>
        <p>(@_numberOfMonsters?.FirstCharToUpper() @_monsterTypePlural)<br>
        @_monstersDescription</p>

        <p>
            <h3>Their Leader:</h3>
            @_monstersLeaderDescription
        </p>
    }
    
    <p>
        <h3>Potential Unexpected Problems:</h3>
        @_encounterProblem
    </p>
    
    <h3>Source Material:</h3>
    @if (_numberOfMonstersInt == 1)
    {
        <p>@_monsterType can be found on page @_monsterPage of the @_sourceMaterial</p>
    }
    else
    {
        <p>@_monsterTypePlural can be found on page @_monsterPage of the @_sourceMaterial</p>
    }
}

@code {
    private string? _encounterAreaDescription;
    private string? _numberOfMonsters;
    private string? _monsterType;
    private string? _monsterTypePlural;
    private string? _monstersDescription;
    private string? _monstersLeaderDescription;
    private string? _encounterProblem;
    private string? _monsterPage;
    private string? _sourceMaterial;
    private int? _numberOfMonstersInt;

    protected override async Task OnInitializedAsync()
    {
        _numberOfMonstersInt = RandomNumberGenerator.GetInt32(1, 10);

        _numberOfMonsters = _numberOfMonsters1.ToWords();

        var randomMonster = MonsterTableHelpers.GetRandom5eMonster();

        _monsterType = randomMonster.CreatureName;

        var monsterTypePluralTask = OpenAiRequestor.GetTextCompletionAsync(
            $"Please answer with just the plural form of \"{_monsterType}\" and nothing other than that.");
        
        _monsterPage = randomMonster.SourcePageNumber.ToString();
        _sourceMaterial = randomMonster.SourceMaterial;

        var encounterAreaTask = OpenAiRequestor.GetTextCompletionAsync(
            "Topic: Description. Please give me a description of an area in the middle of a journey.");
        
        var encounterMonstersLeaderDescriptionTask = OpenAiRequestor.GetTextCompletionAsync(
            $"Topic: Description. Please give me a description of the {_monsterType} leader.");
        
        _monsterTypePlural = await monsterTypePluralTask;

        var encounterMonstersDescriptionTask = OpenAiRequestor.GetTextCompletionAsync(
            $"Topic: Description. Please give me a description of {_monsterTypePlural} monsters.");

        var encounterProblemTask = OpenAiRequestor.GetTextCompletionAsync(
            $"Topic: Medieval battle. Please give me a reason why a battle against {_monsterTypePlural} monsters might unexpectedly get more difficult.");

        _encounterProblem = await encounterProblemTask;

        _monstersLeaderDescription = await encounterMonstersLeaderDescriptionTask;
        
        _monstersDescription = await encounterMonstersDescriptionTask;

        _encounterAreaDescription = await encounterAreaTask;
    }
}